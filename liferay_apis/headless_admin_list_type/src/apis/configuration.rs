/*
 * List Type
 *
 * A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'om.liferay.headless.admin.list.type.client', and version '1.0.0'.. A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.headless.admin.list.type.client', and version '1.0.11'.
 *
 * The version of the OpenAPI document: v1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::fmt::Display;

use headless_common::reqwest::blocking::Client;
use headless_common::{reqwest::Url, url::ParseError};

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: Url,
    pub user_agent: Option<String>,
    pub client: Client,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub bearer_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

#[derive(Debug)]
pub enum ConfigError {
    InvalidPort,
    InvalidScheme,
}

impl Display for ConfigError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ConfigError::InvalidPort => write!(f, "Invalid Port"),
            ConfigError::InvalidScheme => write!(f, "Invalid Scheme"),
        }
    }
}

#[derive(Debug, Clone)]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }

    pub fn set_host(mut self, host: &str) -> Result<Self, ParseError> {
        match self.base_path.set_host(Some(host)) {
            Ok(_) => Ok(self),
            Err(e) => Err(e),
        }
    }

    pub fn set_port(mut self, port: u16) -> Result<Self, ConfigError> {
        match self.base_path.set_port(Some(port)) {
            Ok(_) => Ok(self),
            Err(_) => Err(ConfigError::InvalidPort),
        }
    }

    pub fn set_scheme(mut self, scheme: &str) -> Result<Self, ConfigError> {
        match self.base_path.set_scheme(scheme) {
            Ok(_) => Ok(self),
            Err(_) => Err(ConfigError::InvalidScheme),
        }
    }

    pub fn set_base(mut self, base_url: &str) -> Result<Self, ParseError> {
        let base = Url::parse(base_url)?;
        self.base_path.set_scheme(base.scheme()).unwrap();
        if let Some(host) = base.host() {
            self.base_path.set_host(Some(&host.to_string())).unwrap();
        }

        if let Some(port) = base.port() {
            self.base_path.set_port(Some(port)).unwrap();
        }

        Ok(self)
    }
}

impl Default for Configuration {
    fn default() -> Self {
        Configuration {
            base_path: Url::parse("http://localhost:8080/o/headless-admin-list-type").unwrap(),
            user_agent: Some("OpenAPI-Generator/v1.0/rust".to_owned()),
            client: Client::new(),
            basic_auth: None,
            oauth_access_token: None,
            bearer_access_token: None,
            api_key: None,
        }
    }
}
